/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package Rule;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class RuleMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4933928356128317157L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RuleMessage\",\"namespace\":\"Rule\",\"fields\":[{\"name\":\"station\",\"type\":\"string\"},{\"name\":\"model\",\"type\":\"string\"},{\"name\":\"io\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"value\",\"type\":\"float\"},{\"name\":\"connection\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public CharSequence station;
  @Deprecated public CharSequence model;
  @Deprecated public CharSequence io;
  @Deprecated public long timestamp;
  @Deprecated public float value;
  @Deprecated public boolean connection;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public RuleMessage() {}

  /**
   * All-args constructor.
   */
  public RuleMessage(CharSequence station, CharSequence model, CharSequence io, Long timestamp, Float value, Boolean connection) {
    this.station = station;
    this.model = model;
    this.io = io;
    this.timestamp = timestamp;
    this.value = value;
    this.connection = connection;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public Object get(int field$) {
    switch (field$) {
    case 0: return station;
    case 1: return model;
    case 2: return io;
    case 3: return timestamp;
    case 4: return value;
    case 5: return connection;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: station = (CharSequence)value$; break;
    case 1: model = (CharSequence)value$; break;
    case 2: io = (CharSequence)value$; break;
    case 3: timestamp = (Long)value$; break;
    case 4: value = (Float)value$; break;
    case 5: connection = (Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'station' field.
   */
  public CharSequence getStation() {
    return station;
  }

  /**
   * Sets the value of the 'station' field.
   * @param value the value to set.
   */
  public void setStation(CharSequence value) {
    this.station = value;
  }

  /**
   * Gets the value of the 'model' field.
   */
  public CharSequence getModel() {
    return model;
  }

  /**
   * Sets the value of the 'model' field.
   * @param value the value to set.
   */
  public void setModel(CharSequence value) {
    this.model = value;
  }

  /**
   * Gets the value of the 'io' field.
   */
  public CharSequence getIo() {
    return io;
  }

  /**
   * Sets the value of the 'io' field.
   * @param value the value to set.
   */
  public void setIo(CharSequence value) {
    this.io = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'value' field.
   */
  public Float getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(Float value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'connection' field.
   */
  public Boolean getConnection() {
    return connection;
  }

  /**
   * Sets the value of the 'connection' field.
   * @param value the value to set.
   */
  public void setConnection(Boolean value) {
    this.connection = value;
  }

  /**
   * Creates a new RuleMessage RecordBuilder.
   * @return A new RuleMessage RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }
  
  /**
   * Creates a new RuleMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RuleMessage RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }
  
  /**
   * Creates a new RuleMessage RecordBuilder by copying an existing RuleMessage instance.
   * @param other The existing instance to copy.
   * @return A new RuleMessage RecordBuilder
   */
  public static Builder newBuilder(RuleMessage other) {
    return new Builder(other);
  }
  
  /**
   * RecordBuilder for RuleMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RuleMessage>
    implements org.apache.avro.data.RecordBuilder<RuleMessage> {

    private CharSequence station;
    private CharSequence model;
    private CharSequence io;
    private long timestamp;
    private float value;
    private boolean connection;

    /** Creates a new Builder */
    private Builder() {
      super(RuleMessage.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.model)) {
        this.model = data().deepCopy(fields()[1].schema(), other.model);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.io)) {
        this.io = data().deepCopy(fields()[2].schema(), other.io);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.connection)) {
        this.connection = data().deepCopy(fields()[5].schema(), other.connection);
        fieldSetFlags()[5] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing RuleMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(RuleMessage other) {
            super(RuleMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.model)) {
        this.model = data().deepCopy(fields()[1].schema(), other.model);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.io)) {
        this.io = data().deepCopy(fields()[2].schema(), other.io);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.value)) {
        this.value = data().deepCopy(fields()[4].schema(), other.value);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.connection)) {
        this.connection = data().deepCopy(fields()[5].schema(), other.connection);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'station' field.
      * @return The value.
      */
    public CharSequence getStation() {
      return station;
    }

    /**
      * Sets the value of the 'station' field.
      * @param value The value of 'station'.
      * @return This builder.
      */
    public Builder setStation(CharSequence value) {
      validate(fields()[0], value);
      this.station = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'station' field has been set.
      * @return True if the 'station' field has been set, false otherwise.
      */
    public boolean hasStation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'station' field.
      * @return This builder.
      */
    public Builder clearStation() {
      station = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'model' field.
      * @return The value.
      */
    public CharSequence getModel() {
      return model;
    }

    /**
      * Sets the value of the 'model' field.
      * @param value The value of 'model'.
      * @return This builder.
      */
    public Builder setModel(CharSequence value) {
      validate(fields()[1], value);
      this.model = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'model' field has been set.
      * @return True if the 'model' field has been set, false otherwise.
      */
    public boolean hasModel() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'model' field.
      * @return This builder.
      */
    public Builder clearModel() {
      model = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'io' field.
      * @return The value.
      */
    public CharSequence getIo() {
      return io;
    }

    /**
      * Sets the value of the 'io' field.
      * @param value The value of 'io'.
      * @return This builder.
      */
    public Builder setIo(CharSequence value) {
      validate(fields()[2], value);
      this.io = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'io' field has been set.
      * @return True if the 'io' field has been set, false otherwise.
      */
    public boolean hasIo() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'io' field.
      * @return This builder.
      */
    public Builder clearIo() {
      io = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public Float getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public Builder setValue(float value) {
      validate(fields()[4], value);
      this.value = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public Builder clearValue() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'connection' field.
      * @return The value.
      */
    public Boolean getConnection() {
      return connection;
    }

    /**
      * Sets the value of the 'connection' field.
      * @param value The value of 'connection'.
      * @return This builder.
      */
    public Builder setConnection(boolean value) {
      validate(fields()[5], value);
      this.connection = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'connection' field has been set.
      * @return True if the 'connection' field has been set, false otherwise.
      */
    public boolean hasConnection() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'connection' field.
      * @return This builder.
      */
    public Builder clearConnection() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public RuleMessage build() {
      try {
        RuleMessage record = new RuleMessage();
        record.station = fieldSetFlags()[0] ? this.station : (CharSequence) defaultValue(fields()[0]);
        record.model = fieldSetFlags()[1] ? this.model : (CharSequence) defaultValue(fields()[1]);
        record.io = fieldSetFlags()[2] ? this.io : (CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (Long) defaultValue(fields()[3]);
        record.value = fieldSetFlags()[4] ? this.value : (Float) defaultValue(fields()[4]);
        record.connection = fieldSetFlags()[5] ? this.connection : (Boolean) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
